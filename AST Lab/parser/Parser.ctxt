#BlueJ class context
comment0.params=s
comment0.target=Parser(scanner.Scanner)
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ Parser\n\ @param\ s\ is\ the\ scanner\ \n
comment1.params=expected
comment1.target=void\ eat(java.lang.String)
comment1.text=\n\ Eats\ a\ string\ by\ calling\ the\ scanner\ class's\ eat\ method.\n\ @param\ expected\ is\ the\ string\ to\ be\ eaten\n\ @throws\ ScanErrorException\ if\ the\ scanner's\ eat\ method\ throws\ it.\n
comment10.params=
comment10.target=ast.Expression\ parseExpression()
comment10.text=\n\ Method\:\ parseExpression\n\ Uses\ a\ while\ loop\ to\ parse\ an\ expression\ as\ long\ as\ a\ term\ is\ \n\ added\ or\ subtracted\ with\ another\ term\n\ @return\ an\ integer\ representing\ the\ value\ of\ the\ parsed\ expression\n\ @throws\ ScanErrorException\ if\ the\ eat\ method\ throws\ it.\ \ \n
comment2.params=
comment2.target=void\ parseIF()
comment2.text=\n\ precondition\:\ current\ tokens\ begin\ an\ IF\ statement\n\ postcondition\:\ all\ tokens\ in\ statement\ have\ been\ eaten;\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ current\ token\ is\ first\ one\ after\ the\ IF\ statement\n\ @throws\ ScanErrorException\ if\ the\ eat\ method\ throws\ it.\ \ \n
comment3.params=
comment3.target=ast.Number\ parseNumber()
comment3.text=\n\ precondition\:\ current\ tokens\ is\ an\ integer\n\ postcondition\:\ number\ token\ has\ been\ eaten\n\ @return\ the\ value\ of\ the\ parsed\ integer\n\ @throws\ ScanErrorException\ if\ the\ eat\ method\ throws\ it.\ \ \n
comment4.params=
comment4.target=ast.Statement\ parseStatement()
comment4.text=\n\ method\:\ parseStatement\n\ parses\ a\ WRITELN,\ BEGIN,\ and\ assignment\ statement\ using\ the\ method\ parseFactor\n\ @return\ the\ parsed\ statement\n\ @throws\ ScanErrorException\ if\ the\ eat\ method\ throws\ it.\ \ \n
comment5.params=
comment5.target=void\ parseProgram()
comment6.params=
comment6.target=ast.Statement\ parseStatements()
comment6.text=\n\ Parses\ a\ block\ of\ statements\n\ @return\ a\ statement\ to\ be\ stored\ in\ a\ block\n\ @throws\ ScanErrorException\ if\ the\ eat\ method\ throws\ it.]\n
comment7.params=args
comment7.target=void\ main(java.lang.String[])
comment7.text=\n\ Tests\ the\ parser\ class\n\ @param\ args\ is\ the\ argument\n
comment8.params=
comment8.target=ast.Expression\ parseFactor()
comment8.text=\n\ Method\:\ parseFactor\n\ Recursively\ parses\ what\ is\ inside\ the\ opening\ and\ ending\ parenthesis\ of\ a\ WRITELN\ statement\n\ @return\ the\ value\ of\ the\ factor\ that\ is\ parsed\n\ @throws\ ScanErrorException\ if\ the\ eat\ method\ throws\ it.\ \ \n
comment9.params=
comment9.target=ast.Expression\ parseTerm()
comment9.text=\n\ Method\:\ parseTerm\n\ Uses\ a\ while\ loop\ to\ parses\ a\ term\ as\ long\ as\ a\ factor\ is\ being\ multiplied\ or\ \n\ divided\ with\ an\ another\ factor.\n\ @return\ an\ integer\ representing\ the\ value\ of\ the\ parsed\ term.\ \n\ @throws\ ScanErrorException\ if\ the\ eat\ method\ throws\ it.\ \ \n
numComments=11
